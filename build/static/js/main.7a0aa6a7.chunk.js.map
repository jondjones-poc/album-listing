{"version":3,"sources":["state/constants/actionTypes.js","state/actions/fetchSongs.js","components/Album.js","components/withCollapse.js","components/AlbumContainer.js","state/selectors/getAlbums.js","App.js","serviceWorker.js","state/reducers/songs.js","index.js","store/configureStore.js"],"names":["FETCH_SONGS_REQUEST","FETCH_SONGS_SUCCESS","FETCH_SONGS_ERROR","fetchSongsSuccess","response","type","fetchSongsError","error","fetchSongs","dispatch","a","console","log","axios","get","then","catch","message","Album","props","songs","map","song","index","Heading","styled","div","HideButton","onClick","setShowHide","aria-label","role","ShowButton","withCollapse","title","WrappedComponent","showAll","useState","showThisInstance","setshowThisInstance","display","AlbumContainer","hasAlbums","albums","useDispatch","useEffect","items","album","band","AlbumContainerWithCollapse","compare","b","bandA","toUpperCase","bandB","comparison","groupBy","helper","reduce","reducer","current","key","push","Object","assign","getAlbums","state","groupedByAlbums","sort","length","AlbumListingContainer","connect","App","setShowAll","Boolean","window","location","hostname","match","initialState","isFetching","data","store","createStore","combineReducers","applyMiddleware","thunk","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a0aa6a7.chunk.js","sourcesContent":["export const FETCH_SONGS_REQUEST = 'FETCH_SONGS_REQUEST';\r\nexport const FETCH_SONGS_SUCCESS = 'FETCH_SONGS_SUCCESS';\r\nexport const FETCH_SONGS_ERROR = 'FETCH_SONGS_ERROR';","import axios from 'axios'\r\nimport {\r\n    FETCH_SONGS_REQUEST,\r\n    FETCH_SONGS_SUCCESS,\r\n    FETCH_SONGS_ERROR\r\n} from '../constants/actionTypes';\r\n\r\nconst fetchSongsRequest = () => ({\r\n    type: FETCH_SONGS_REQUEST\r\n});\r\n\r\nconst fetchSongsSuccess = response => ({\r\n    type: FETCH_SONGS_SUCCESS,\r\n    response\r\n});\r\n\r\nconst fetchSongsError = error => ({\r\n    type: FETCH_SONGS_ERROR,\r\n    error\r\n});\r\n\r\nconst fetchSongs = () => async (dispatch) => {\r\n    dispatch(fetchSongsRequest());\r\n\r\n    const server = process.env.NODE_ENV === \"development\" \r\n                ? 'http://localhost:9000/albums'\r\n                : 'https://album-display-poc.netlify.app/.netlify/functions/albums'\r\n    \r\n    console.log();\r\n    axios.get(server)\r\n        .then(response => {\r\n            dispatch(fetchSongsSuccess(response));\r\n        })\r\n        .catch(error => {\r\n            dispatch(fetchSongsError(error.message));\r\n            throw error;\r\n        });\r\n};\r\n\r\nexport default fetchSongs;","import React from 'react';\r\n\r\n// presentational component simple logic to render, no state\r\nfunction Album(props) {\r\n    const { songs } = props;\r\n    return (\r\n        <ul>\r\n            {songs && songs.map((song, index) => \r\n                <li key={index}>{song}</li>\r\n            )}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default Album;\r\n","import React, { useState } from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst Heading = styled.div`\r\n    display: block;\r\n    font-weight: bold;\r\n`\r\n\r\nconst withCollapse = (title, WrappedComponent, showAll) => {\r\n  function WithCollapse(props) {\r\n\r\n    const [showThisInstance, setshowThisInstance] = useState(showAll);\r\n\r\n    const setShowHide = display => {\r\n      setshowThisInstance(display)\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n        <Heading>\r\n        {title} {showThisInstance ? <HideButton setShowHide={setShowHide}/> : <ShowButton setShowHide={setShowHide}/>}\r\n        </Heading>\r\n        {showThisInstance && <WrappedComponent {...props} />}\r\n      </div>)\r\n    }    \r\n  return WithCollapse;\r\n};\r\n\r\n\r\nfunction HideButton(props) {\r\n  return <span \r\n    onClick={() => props.setShowHide(false)} \r\n    aria-label=\"Hide Button\" \r\n    role=\"img\">⬆️</span>\r\n}\r\n\r\nfunction ShowButton(props) {\r\n  return <span \r\n    onClick={() => props.setShowHide(true)}\r\n    aria-label=\"Hide Button\" \r\n    role=\"img\">⬇️</span>\r\n}\r\n\r\nexport default withCollapse;\r\n","import React, { useEffect } from 'react';\r\nimport fetchSongs from '../state/actions/fetchSongs'\r\nimport Album from './Album'\r\nimport withCollapse from './withCollapse'\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction AlbumContainer(props) {\r\n    const { hasAlbums, albums, showAll } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n      dispatch(fetchSongs())\r\n    }, [dispatch]);\r\n\r\n    if (!hasAlbums) {\r\n      return <div>Loading</div>;\r\n    }\r\n\r\n    const items = albums.map((album, index) => {\r\n      const title = `${album.band},  ${album.album}`;\r\n      const AlbumContainerWithCollapse = withCollapse(title, Album, showAll);\r\n      return <AlbumContainerWithCollapse key={index} {...album} />\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        {items}\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default AlbumContainer;","const getAlbums = state => {\r\n    // could have used new ES7 optional chaining to make nicer\r\n    const songs = state && state.songs && state.songs.items ? state.songs.items : [];\r\n    const groupedByAlbums = groupBy(songs).sort(compare);\r\n\r\n    return { \r\n        albums: groupedByAlbums || [],\r\n        hasAlbums: groupedByAlbums && groupedByAlbums.length > 0\r\n    }\r\n};\r\n\r\n// sort by band name\r\nexport const compare = (a, b) => {\r\n  const bandA = a.band.toUpperCase();\r\n  const bandB = b.band.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (bandA > bandB) {\r\n    comparison = 1;\r\n  } else if (bandA < bandB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n\r\n// would unot test this\r\nexport const groupBy = songs => {\r\n  let helper = {};\r\n\r\n  // Using reduce to avoid mutating items\r\n  return songs.reduce((reducer, current) => {\r\n    var key = `${current.band} - ${current.album}`;\r\n\r\n    //Group by album with songs\r\n    if(!helper[key]) {\r\n      helper[key] = Object.assign({}, current);\r\n      (helper[key].songs = []).push(current.song);\r\n\r\n      // remove individual song from top level property\r\n      delete helper[key].song;\r\n      reducer.push(helper[key]);\r\n    } else {\r\n      helper[key].songs.push(current.song);\r\n    }\r\n\r\n    return reducer;\r\n}, []);\r\n}\r\n\r\nexport default getAlbums;\r\n","import React, { useState, Fragment } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport AlbumContainer from './components/AlbumContainer'\r\nimport getAlbums from './state/selectors/getAlbums';\r\nimport styled from \"styled-components\"\r\n\r\nconst Heading = styled.div`\r\n    display: block;\r\n    font-weight: bold;\r\n    font-size: 1.5rem;\r\n    padding-bottom: 1rem;\r\n\r\n    span {\r\n      padding-left: 1rem;\r\n    }\r\n`\r\n\r\n\r\n// Use container pattern to decouple concerns from grid\r\nconst AlbumListingContainer = connect(getAlbums)(AlbumContainer);\r\n\r\nfunction App() {\r\n\r\n  const [showAll, setShowAll] = useState(true);\r\n\r\n  return (\r\n    <Fragment>    \r\n      <Heading>\r\n        Albums  <span onClick={() => setShowAll(!showAll)}> {showAll ?  '⬆️' : '⬇️'}</span>\r\n      </Heading>\r\n      <AlbumListingContainer showAll={showAll}></AlbumListingContainer>\r\n    </Fragment>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    FETCH_SONGS_REQUEST,\r\n    FETCH_SONGS_SUCCESS,\r\n    FETCH_SONGS_ERROR\r\n} from '../constants/actionTypes';\r\n\r\nconst initialState = {\r\n    isFetching: false,\r\n    response: {},\r\n    error: null\r\n};\r\n\r\nconst songs = (state = initialState, { type, error, response }) => {\r\n    switch (type) {\r\n        case FETCH_SONGS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            };\r\n        case FETCH_SONGS_SUCCESS:\r\n            return {\r\n                isFetching: false,\r\n                items: response.data,\r\n                error: null\r\n            };\r\n        case FETCH_SONGS_ERROR:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default songs;\r\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './store/configureStore'\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport songs from '../state/reducers/songs'\r\n\r\n// Create Store.\r\nconst Store = () => {\r\n    const store = createStore(\r\n        combineReducers({songs}),\r\n        applyMiddleware(thunk)\r\n    );\r\n\r\n    return store\r\n};\r\n\r\nexport default Store;"],"sourceRoot":""}